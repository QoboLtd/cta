<?phpif ( !class_exists('CTA_Call_To_Action_Post_Type') ) {	class CTA_Call_To_Action_Post_Type {		function __construct() {			self::load_hooks();		}		private function load_hooks() {					add_action('admin_init', array( __CLASS__ ,	'rebuild_permalinks' ) );			add_action('init', array( __CLASS__ , 'register_post_type' ) );			add_action('init', array( __CLASS__ , 'register_category_taxonomy' ) );						/* Load Admin Only Hooks */			if (is_admin()) {							/* Register Activation */				register_activation_hook( INBOUND_MARKETING_AUTOMATION_FILE , array( __CLASS__ , 'register_activation') );								/* Register Columns */				add_filter( 'manage_wp-call-to-action_posts_columns' , array( __CLASS__ , 'register_columns') );								/* Prepare Column Data */				add_action( "manage_posts_custom_column", array( __CLASS__ , 'prepare_column_data' ) , 10, 2 );							/* Define Sortable Columns */				add_filter( 'manage_edit_wp-call-to-action_sortable_columns', array( __CLASS__ , 'define_sortable_columns' ) );								/* Filter Row Actions */				add_filter( 'post_row_actions' , array( __CLASS__ , 'filter_row_actions' ) , 10 , 2 );								/* Add Category Filter */				add_action( 'restrict_manage_posts' , array(	__CLASS__ ,'add_category_taxonomy_filter' ));								/* Add Query Parsing for Filter */				add_filter( 'parse_query' ,	array( __CLASS__ , 'convert_id_to_slug' ) );								/* Remove Delete from Bulk Actions */				add_filter( 'bulk_actions-edit-email-template' , array( __CLASS__ , 'remove_bulk_actions' ) );										}						add_action( 'admin_init', array( __CLASS__ , 'change_excerpt_to_summary' ) );		}		/* Rebuilds permalinks after activation */ 		public static function rebuild_permalinks() {			$activation_check = get_option('wp_cta_activate_rewrite_check',0);			if ($activation_check)			{				global $wp_rewrite;				$wp_rewrite->flush_rules();				update_option( 'wp_cta_activate_rewrite_check', '0');			}		}						public static function register_post_type() {			$slug = get_option( 'wp-cta-main-wp-call-to-action-permalink-prefix', 'cta' );			$labels = array(				'name' => __('Call to Action', 'cta' ),				'singular_name' => __('Call to Action', 'cta' ),				'add_new' => __('Add New', 'cta' ),				'add_new_item' => __('Add New Call to Action' , 'cta' ),				'edit_item' => __('Edit Call to Action' , 'cta' ),				'new_item' => __('New Call to Action' , 'cta' ),				'view_item' => __('View Call to Action' , 'cta' ),				'search_items' => __('Search Call to Action' , 'cta' ),				'not_found' =>	__('Nothing found' , 'cta' ),				'not_found_in_trash' => __('Nothing found in Trash' , 'cta' ),				'parent_item_colon' => ''			);			$args = array(				'labels' => $labels,				'public' => true,				'publicly_queryable' => true,				'show_ui' => true,				'query_var' => true,				'menu_icon' => WP_CTA_URLPATH . '/images/click.png',				'rewrite' => array("slug" => "$slug"),				'capability_type' => 'post',				'hierarchical' => false,				'menu_position' => null,				'show_in_nav_menus'	=> false,				'supports' => array('title', 'custom-fields','thumbnail')				);			register_post_type( 'wp-call-to-action' , $args );			//flush_rewrite_rules( false );					}				/* Register Category Taxonomy */		public static function register_category_taxonomy() {					register_taxonomy('wp_call_to_action_category','wp-call-to-action', array(					'hierarchical' => true,					'label' => __( 'CTA Categories' , 'cta' ),					'singular_label' => __( 'Call to Action Category' , 'cta' ),					'show_ui' => true,					'show_in_nav_menus'	=> false,					'query_var' => true,					"rewrite" => true			));					}				/* Register Columns */		public static function register_columns( $cols ) {					$cols = array(			"cb" => "<input type=\"checkbox\" />",			"thumbnail-cta" => __( 'Preview' , 'cta' ),			"title" => __( 'Call to Action Title' , 'cta' ),			"cta_stats" => __( 'Variation Testing Stats' , 'cta' ),			"cta_impressions" => __( 'Total<br>Impressions' , 'cta' ),			"cta_actions" => __( 'Total<br>Conversions' , 'cta' ),			"cta_cr" => __( 'Total<br>Click Through Rate' , 'cta' )			);						return $cols;					}				/* Prepare Column Data */		public static function prepare_column_data( $column , $post_id ) {			global $post;			if ($post->post_type !='wp-call-to-action') {				return $column;			}			if ("ID" == $column)			{				echo $post->ID;			}			else if ("title" == $column)			{			}			else if ("author" == $column)			{			}			else if ("date" == $column)			{			}			else if ("thumbnail-cta" == $column)			{				$template = get_post_meta($post->ID, 'wp-cta-selected-template', true);				$permalink = get_permalink($post->ID);				$datetime = the_modified_date('YmjH',null,null,false);				$permalink = $permalink.'?dt='.$datetime;				$thumbnail = 'http://s.wordpress.com/mshots/v1/' . urlencode(esc_url($permalink)) . '?w=140';				echo "<a title='Click to Preview this variation' class='thickbox' href='".$permalink."?wp-cta-variation-id=0&wp_cta_iframe_window=on&post_id=".$post->ID."&TB_iframe=true&width=640&height=703' target='_blank'><img src=".$thumbnail."' style='width:150px;height:110px;' title='Click to Preview'></a>";			}			else if ($column == 'cr')			{				$wp_cta_impressions = wp_cta_get_page_views($post->ID);				$wp_cta_conversions = wp_cta_get_conversions($post->ID);				if ($wp_cta_conversions>0){					$wp_cta_cr = round(($wp_cta_conversions/$wp_cta_impressions), 2);				} else {					$wp_cta_cr = "0.0";				}			}			else if ("cta_stats" == $column)			{				$wp_cta_impressions = wp_cta_get_page_views($post->ID);				$wp_cta_impressions =	apply_filters('wp_cta_col_impressions',$wp_cta_impressions);				self::show_stats_data();			}			elseif ("cta_impressions" == $column)			{				echo self::show_aggregated_stats("cta_impressions");			}			elseif ("cta_actions" == $column)			{				echo self::show_aggregated_stats("cta_actions");			}			elseif ("cta_cr" == $column)			{				echo self::show_aggregated_stats("cta_cr") . "%";			}			elseif ("template" == $column) {				$template_used = get_post_meta($post->ID, 'wp-cta-selected-template', true);				echo $template_used;			}		}				/* Define Sortable Columns */		public static function define_sortable_columns($columns) {					return array(				'title' 			=> 'title',				'impressions'		=> 'impressions',				'actions'			=> 'actions',				'cr'				=> 'cr'			);					}				/* Define Row Actions */		public static function filter_row_actions( $actions , $post ) {						if ($post->post_type=='wp-call-to-action')			{				$actions['clear'] = '<a href="#clear-stats" id="wp_cta_clear_'.$post->ID.'" class="clear_stats" title="'				. esc_attr(__("Clear impression and conversion records", 'inboundnow_clear_stats'))				. '" >' .	__('Clear All Stats', 'Clear impression and conversion records') . '</a><span class="hover-description">Hover over the letters to the right for more options</span>';			}						return $actions;					}				/* Remove Bulk Actions */		public static function remove_bulk_actions( $actions ){					}				/* Adds ability to filter email templates by custom post type */		public static function add_category_taxonomy_filter() {			global $post_type;			if ($post_type === "wp-call-to-action") {			$post_types = get_post_types( array( '_builtin' => false ) );			if ( in_array( $post_type, $post_types ) ) {				$filters = get_object_taxonomies( $post_type );				foreach ( $filters as $tax_slug ) {					$tax_obj = get_taxonomy( $tax_slug );					(isset($_GET[$tax_slug])) ? $current = $_GET[$tax_slug] : $current = 0;					wp_dropdown_categories( array(						'show_option_all' => __('Show All '.$tax_obj->label ),						'taxonomy' 		=> $tax_slug,						'name' 			=> $tax_obj->name,						'orderby' 		=> 'name',						'selected' 		=> $current,						'hierarchical' 		=> $tax_obj->hierarchical,						'show_count' 		=> false,						'hide_empty' 		=> true					) );					}				}			}		}				/* Convert Taxonomy ID to Slug for Filter Serch */		public static function convert_id_to_slug($query) {			global $pagenow;			$qv = &$query->query_vars;			if( $pagenow=='edit.php' && isset($qv['wp_call_to_action_category']) && is_numeric($qv['wp_call_to_action_category']) ) {				$term = get_term_by('id',$qv['wp_call_to_action_category'],'wp_call_to_action_category');				$qv['wp_call_to_action_category'] = $term->slug;			}		}				/* Changes the title of Excerpt meta box to Summary */		public static function change_excerpt_to_summary() {			$post_type = "wp-call-to-action";			if ( post_type_supports($post_type, 'excerpt') ) {			add_meta_box('postexcerpt', __( 'Short Description' , 'cta' ), 'post_excerpt_meta_box', $post_type, 'normal', 'core'); }		}				public static function register_activation() {										}				public static function show_stats_data()		{			global $post;			$permalink = get_permalink($post->ID);			$variations = get_post_meta($post->ID, 'cta_ab_variations', true);			$admin_url = admin_url();			$admin_url = str_replace('?frontend=false','',$admin_url);			if ($variations)			{				$variations = explode(",", $variations);				$variations = array_filter($variations,'is_numeric');				//echo "<b>".$wp_cta_impressions."</b> visits";				echo "<span class='show-stats button'>". __( 'Show Variation Stats' , 'cta' ) ."</span>";				echo "<ul class='wp-cta-varation-stat-ul'>";				$first_status = get_post_meta($post->ID,'wp_cta_ab_variation_status', true); // Current status				$first_notes = get_post_meta($post->ID,'wp-cta-variation-notes', true);				$cr_array = array();				$i = 0;				$impressions = 0;				$conversions = 0;				foreach ($variations as $vid)				{					$letter = wp_cta_ab_key_to_letter($vid); // convert to letter					$each_impression = get_post_meta($post->ID,'wp-cta-ab-variation-impressions-'.$vid, true); // get impressions					$v_status = get_post_meta($post->ID,'cta_ab_variation_status_'.$vid, true); // Current status					if ($i === 0) { $v_status = $first_status; } // get status of first					(($v_status === "")) ? $v_status = "1" : $v_status = $v_status; // Get on/off status					$each_notes = get_post_meta($post->ID,'wp-cta-variation-notes-'.$vid, true); // Get Notes					if ($i === 0) { $each_notes = $first_notes; } // Get first notes					$each_conversion = get_post_meta($post->ID,'wp-cta-ab-variation-conversions-'.$vid, true);					(($each_conversion === "")) ? $final_conversion = 0 : $final_conversion = $each_conversion;					$impressions += get_post_meta($post->ID,'wp-cta-ab-variation-impressions-'.$vid, true);					$conversions += get_post_meta($post->ID,'wp-cta-ab-variation-conversions-'.$vid, true);					if ($each_impression != 0)					{						$conversion_rate = $final_conversion / $each_impression;					}					else					{						$conversion_rate = 0;					}					$conversion_rate = round($conversion_rate,2) * 100;					$cr_array[] = $conversion_rate;					if ($v_status === "0")					{						$final_status = __( '(Paused)' , 'cta' );					}					else					{						$final_status = "";					}					/*if ($cr_array[$i] > $largest) {					$largest = $cr_array[$i];					}					(($largest === $conversion_rate)) ? $winner_class = 'wp-cta-current-winner' : $winner_class = ""; */					(($final_conversion === "1")) ? $c_text = 'conversion' : $c_text = "conversions";					(($each_impression === "1")) ? $i_text = 'view' : $i_text = "views";					(($each_notes === "")) ? $each_notes = 'No notes' : $each_notes = $each_notes;					$data_letter = "data-letter=\"".$letter."\"";					$popup = "data-notes=\"<span class='wp-cta-pop-description'>".$each_notes."</span><span class='wp-cta-pop-controls'><span class='wp-cta-pop-edit button-primary'><a href='".$admin_url."post.php?post=".$post->ID."&wp-cta-variation-id=".$vid."&action=edit'>Edit This Varaition</a></span><span class='wp-cta-pop-preview button'><a title='Click to Preview this variation' class='thickbox' href='".$permalink."?wp-cta-variation-id=".$vid."&wp_cta_iframe_window=on&post_id=".$post->ID."&TB_iframe=true&width=640&height=703' target='_blank'>Preview This Varaition</a></span><span class='wp-cta-bottom-controls'><span class='wp-cta-delete-var-stats' data-letter='".$letter."' data-vid='".$vid."' rel='".$post->ID."'>Clear These Stats</span></span></span>\"";					echo "<li rel='".$final_status."' data-postid='".$post->ID."' data-letter='".$letter."' data-wp-cta='' class='wp-cta-stat-row-".$vid." ".$post->ID. '-'. $conversion_rate ." status-".$v_status. "'><a ".$popup." ".$data_letter." class='wp-cta-letter' title='click to edit this variation' href='".$admin_url."/wp-admin/post.php?post=".$post->ID."&wp-cta-variation-id=".$vid."&action=edit'>" . $letter . "</a><span class='wp-cta-numbers'> <span class='wp-cta-impress-num'>" . $each_impression . "</span><span class='visit-text'>".$i_text." with</span><span class='wp-cta-con-num'>". $final_conversion . "</span> ".$c_text."</span><a ".$popup." ".$data_letter." class='cr-number cr-empty-".$conversion_rate."' href='/wp-admin/post.php?post=".$post->ID."&wp-cta-variation-id=".$vid."&action=edit'>". $conversion_rate . "%</a></li>";					$i++;				}				echo "</ul>";				$winning_cr = max($cr_array); // best conversion rate				if ($winning_cr != 0) {				echo "<span class='variation-winner-is'>".$post->ID. "-".$winning_cr."</span>";				}				//echo "Total Visits: " . $impressions;				//echo "Total Conversions: " . $conversions;			}			else			{				$notes = get_post_meta($post->ID,'wp-cta-variation-notes', true); // Get Notes				$cr = self::show_aggregated_stats("cta_cr");				(($notes === "")) ? $notes = 'No notes' : $notes = $notes;				$popup = "data-notes=\"<span class='wp-cta-pop-description'>".$notes."</span><span class='wp-cta-pop-controls'><span class='wp-cta-pop-edit button-primary'><a href='".$admin_url."post.php?post=".$post->ID."&wp-cta-variation-id=0&action=edit'>Edit This Varaition</a></span><span class='wp-cta-pop-preview button'><a title='Click to Preview this variation' class='thickbox' href='".$permalink."?wp-cta-variation-id=0&wp_cta_iframe_window=on&post_id=".$post->ID."&TB_iframe=true&width=640&height=703' target='_blank'>Preview This Varaition</a></span><span class='wp-cta-bottom-controls'><span class='wp-cta-delete-var-stats' data-letter='A' data-vid='0' rel='".$post->ID."'>Clear These Stats</span></span></span>\"";				echo "<ul class='wp-cta-varation-stat-ul'><li rel='' data-postid='".$post->ID."' data-letter='A' data-wp-cta=''><a ".$popup." data-letter=\"A\" class='wp-cta-letter' title='click to edit this variation' href='".$admin_url."post.php?post=".$post->ID."&wp-cta-variation-id=0&action=edit'>A</a><span class='wp-cta-numbers'> <span class='wp-cta-impress-num'>" . self::show_aggregated_stats("cta_impressions") . "</span><span class='visit-text'>visits with</span><span class='wp-cta-con-num'>". self::show_aggregated_stats("cta_actions") . "</span> conversions</span><a class='cr-number cr-empty-".$cr."' href='".$admin_url."post.php?post=".$post->ID."&wp-cta-variation-id=0&action=edit'>". $cr . "%</a></li></ul>";				echo "<div class='no-stats-yet'>". __( 'No A/B Tests running for this landing page.' , 'cta' ) ." <a href='/wp-admin/post.php?post=".$post->ID."&wp-cta-variation-id=1&action=edit&new-variation=1&wp-cta-message=go'>Start one</a></div>";			}		}				public static function show_aggregated_stats($type_of_stat)		{			global $post;			$variations = get_post_meta($post->ID, 'cta_ab_variations', true);			$variations = explode(",", $variations);			$impressions = 0;			$conversions = 0;			foreach ($variations as $vid)			{				$each_impression = get_post_meta($post->ID,'wp-cta-ab-variation-impressions-'.$vid, true);				$each_conversion = get_post_meta($post->ID,'wp-cta-ab-variation-conversions-'.$vid, true);				(($each_conversion === "")) ? $final_conversion = 0 : $final_conversion = $each_conversion;				$impressions += get_post_meta($post->ID,'wp-cta-ab-variation-impressions-'.$vid, true);				$conversions += get_post_meta($post->ID,'wp-cta-ab-variation-conversions-'.$vid, true);			}			if ($type_of_stat === "cta_actions")			{				return $conversions;			}			if ($type_of_stat === "cta_impressions")			{				return $impressions;			}			if ($type_of_stat === "cta_cr")			{				if ($impressions != 0) {				$conversion_rate = $conversions / $impressions;				} else {				$conversion_rate = 0;				}				$conversion_rate = round($conversion_rate,2) * 100;				return $conversion_rate;			}		}	}		/* Load Post Type Pre Init */	$GLOBALS['CTA_Call_To_Action_Post_Type'] = new CTA_Call_To_Action_Post_Type();}